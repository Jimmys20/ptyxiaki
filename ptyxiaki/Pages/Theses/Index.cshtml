@page
@model ptyxiaki.Pages.Theses.IndexModel
@inject IAuthorizationService authorizationService

@{
  ViewData["Title"] = "Πτυχιακές";
}

<h1>@ViewData["Title"]</h1>

<p>
  <div class="btn-group">
    <a data-status="@Status.Available" class="btn btn-outline-info">Διαθέσιμες</a>
    @if (User.IsInRole(Globals.PROFESSOR_ROLE))
    {
      <a data-status="@Status.Unavailable" class="btn btn-outline-info text-nowrap">Μη διαθέσιμες</a>
    }
    <a data-status="@Status.Active" class="btn btn-outline-info">Ενεργές</a>
    @if (User.IsInRole(Globals.PROFESSOR_ROLE))
    {
      <a data-status="@Status.Canceled" class="btn btn-outline-info">Ακυρωμένες</a>
    }
    <a data-status="@Status.Completed" class="btn btn-outline-info">Ολοκληρωμένες</a>
  </div>
  @if (User.IsInRole(Globals.PROFESSOR_ROLE))
  {
    <a id="myTheses" class="btn btn-outline-info">Οι πτυχιακές μου</a>
  }
</p>
<p>
  @if ((await authorizationService.AuthorizeAsync(User, new Thesis(), Operations.Create)).Succeeded)
  {
    <a asp-page="Create">Δημιουργία νέας</a>
  }
</p>
<table id="theses" class="table table-striped table-bordered dt-responsive nowrap" style="width: 100%;">
  <thead>
    <tr>
      <th></th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].createdAt)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].title)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].semester)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].assignmentType)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].professor)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].assignments)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].categorizations)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].requirements)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].status)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].professorId)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].professor.lastName)
      </th>
      <th>
        @Html.DisplayNameFor(model => model.theses[0].professor.firstName)
      </th>
    </tr>
  </thead>
</table>

@section Scripts {
  <script>
    $(function () {
      var userId = '@User.getUserId()';

      var table = $('#theses').DataTable({
        ajax: {
          type: 'POST',
          url: '/api/theses'
        },
        columns: [{
          className: 'control',
          data: null,
          defaultContent: '',
          orderable: false
        }, {
          data: 'createdAt',
          visible: false
        }, {
          data: 'title',
          width: '480px',
          className: 'text-wrap',
          render: function (data, type, row, meta) {
            return `<a href="/Theses/Details?id=${row.thesisId}">${data}</a>`;
          }
        }, {
          data: 'semester.title'
        }, {
          data: 'assignmentType'
        }, {
          data: 'professor.fullName',
          name: 'professor.fullName',
          orderData: [11, 12],
          render: function (data, type, row, meta) {
            return `<a href="/Professors/Details?id=${row.professorId}">${data}</a>`;
          }
        }, {
          data: 'assignments',
          name: 'assignments',
          orderable: false,
          render: function (data, type, row, meta) {
            var retVal = '<ul class="list-unstyled mb-0">';

            for (var d of data) {
              retVal += `<li><a href="/Students/Details?id=${d.student.studentId}">${d.student.fullName}</a></li>`;
            }

            retVal += '</ul>';

            return retVal;
          }
        }, {
          data: 'categorizations',
          orderable: false,
          render: function (data, type, row, meta) {
            var retVal = '<ul class="list-unstyled mb-0">';

            for (var d of data) {
              retVal += '<li>' + d.category.title + '</li>';
            }

            retVal += '</ul>';

            return retVal;
          }
        }, {
          data: 'requirements',
          orderable: false,
          render: function (data, type, row, meta) {
            var retVal = '<ul class="list-unstyled mb-0">';

            for (var d of data) {
              retVal += '<li>' + d.course.title + '</li>';
            }

            retVal += '</ul>';

            return retVal;
          },
          visible: false
        }, {
          data: 'status',
          name: 'status',
          visible: false
        }, {
          data: 'professorId',
          name: 'professorId',
          visible: false
        }, {
          data: 'professor.lastName',
          visible: false
        }, {
          data: 'professor.firstName',
          visible: false
        }],
        order: [1, 'desc'],
        responsive: {
          details: {
            type: 'column'
          }
        },
        serverSide: true
      });

      //setMyTheses()
      var setMyTheses = function (enable) {
        table.columns('professorId:name').search(enable ? userId : '').draw();

        table.column('professor.fullName:name').visible(!enable);

        $('#myTheses').toggleClass('active', enable);

        sessionStorage.myTheses = JSON.stringify(enable);
      };

      setMyTheses(sessionStorage.myTheses === undefined ? false : JSON.parse(sessionStorage.myTheses));

      $('#myTheses').click(function () {
        var enable = !$(this).hasClass('active');
        setMyTheses(enable);
      });

      //setStatus()
      var setStatus = function (status) {
        table.column('status:name').search(status).draw();

        if (status == '@Status.Available' || status == '@Status.Unavailable') {
          table.column('assignments:name').visible(false);
        } else {
          table.column('assignments:name').visible(true);
        }

        $('[data-status]').removeClass('active');
        $(`[data-status="${status}"]`).addClass('active');

        sessionStorage.selectedStatus = status;
      };

      setStatus(sessionStorage.selectedStatus ? sessionStorage.selectedStatus : '@Status.Available');

      $('[data-status]').click(function (e) {
        var status = $(this).data('status');
        setStatus(status);
      });
    });
  </script>
}
